import heavy_stock_solver as hss

# # #  parameter sample  # # #
# 56 1.7 -> 1.2
# 68 3.0 -> 2.8
required_length = [[1, 3.7], [1, 3.1], [2, 2.6], [2, 2.0], [3, 8.0], [3, 4.0], [4, 7.0], [5, 7.0], [6, 7.0], [7, 7.0], [8, 7.0],
                   [9, 7.0], [10, 7.0], [11, 7.0], [12, 7.0], [13, 4.0], [13, 3.0], [14, 12.0], [14, 10.4], [14, 9.7], [14, 9.3],
                   [15, 8.4], [15, 8.3], [15, 8.0], [15, 6.7], [15, 6.5], [16, 6.1], [16, 5.4], [16, 5.2], [16, 5.0], [16, 4.3],
                   [16, 4.0], [17, 9.6], [17, 9.2], [17, 8.9], [17, 6.4], [18, 5.1], [18, 4.7], [18, 4.6], [18, 3.8], [18, 3.2],
                   [18, 2.3], [19, 10.4], [19, 9.1], [19, 9.0], [19, 8.6], [20, 7.4], [20, 7.1], [20, 6.6], [20, 5.8], [20, 5.3],
                   [21, 5.0], [21, 4.3], [21, 4.0], [21, 3.6], [21, 3.3], [21, 3.0], [22, 2.8], [22, 2.3], [22, 1.8], [23, 5.0],
                   [24, 5.0], [25, 5.0], [26, 5.0], [27, 5.0], [28, 7.0], [28, 6.0], [28, 4.9], [29, 4.1], [29, 4.0], [29, 2.9],
                   [29, 2.6], [30, 7.4], [30, 7.0], [30, 6.7], [31, 5.0], [31, 4.5], [31, 4.0], [31, 3.2], [32, 2.5], [32, 2.2],
                   [32, 2.0], [33, 1.9], [34, 1.7], [35, 5.5], [35, 5.3], [35, 5.0], [35, 4.0], [35, 3.6], [36, 5.2], [37, 5.2],
                   [38, 5.2], [39, 5.2], [40, 5.2], [41, 5.2], [42, 5.2], [43, 5.2], [44, 5.2], [45, 2.2], [46, 5.5], [46, 5.4],
                   [46, 4.6], [47, 4.2], [47, 3.6], [48, 7.9], [48, 6.9], [48, 6.2], [48, 6.0], [48, 5.6], [49, 3.7], [49, 2.5],
                   [50, 7.6], [50, 5.5], [50, 5.0], [50, 4.8], [50, 4.5], [50, 4.1], [51, 5.0], [52, 1.6], [52, 1.8], [52, 2.3],
                   [53, 3.3], [53, 4.3], [53, 5.8], [53, 6.3], [54, 2.1], [54, 2.2], [54, 2.3], [54, 2.4], [55, 3.0], [55, 3.1],
                   [55, 5.4], [56, 5.3], [56, 3.8], [56, 3.3], [56, 3.1], [56, 1.7], [57, 4.5], [57, 2.7], [57, 2.4], [58, 2.1],
                   [59, 6.6], [59, 6.0], [59, 5.1], [59, 3.3], [60, 5.4], [61, 5.4], [62, 5.5], [63, 5.0], [63, 3.3], [64, 4.7],
                   [64, 3.6], [65, 4.4], [65, 3.4], [65, 2.5], [66, 1.8], [67, 1.3], [68, 2.8], [68, 2.4], [68, 1.5]]
required_number = [[1, 56], [1, 56], [2, 118], [2, 118], [3, 7], [3, 7], [4, 84], [5, 84], [6, 84], [7, 84], [8, 90],
                   [9, 71], [10, 72], [11, 71], [12, 72], [13, 44], [13, 33], [14, 6], [14, 4], [14, 5], [14, 12],
                   [15, 7], [15, 3], [15, 7], [15, 3], [15, 3], [16, 15], [16, 13], [16, 18], [16, 3], [16, 2],
                   [16, 8], [17, 5], [17, 3], [17, 3], [17, 3], [18, 3], [18 ,3], [18, 9], [18, 9], [18, 3],
                   [18, 3], [19, 5], [19, 3], [19, 4], [19, 9], [20, 3], [20, 2], [20, 5], [20, 4], [20, 4],
                   [21, 13], [21, 14], [21, 6], [21, 11], [21, 3], [21, 6], [22, 15], [22, 54], [22, 32], [23, 144],
                   [24, 144], [25, 144], [26, 144], [27, 144], [28, 6], [28, 6], [28, 3], [29, 3], [29, 2], [29, 6],
                   [29, 3], [30, 9], [30, 4], [30, 5], [31, 36], [31, 4], [31, 3], [31, 4], [32, 35], [32, 6],
                   [32, 21], [33, 12], [34, 3], [35, 16], [35, 7], [35, 3], [35, 16], [35, 25], [36, 170], [37, 170],
                   [38, 170], [39, 170], [40, 170], [41, 170], [42, 171], [43, 171], [44, 168], [45, 40], [46, 4], [46, 6],
                   [46, 9], [47, 24], [47, 2], [48, 3], [48, 6], [48, 3], [48, 3], [48, 9], [49, 3], [49, 15],
                   [50, 13], [50, 4], [50, 16], [50, 12], [50, 4], [50, 9], [51, 2], [52, 12], [52, 12], [52, 20],
                   [53, 3], [53, 4], [53, 3], [53, 4], [54, 2], [54, 3], [54, 2], [54, 3], [55, 6], [55, 3],
                   [55, 3], [56, 4], [56, 2], [56, 4], [56, 2], [56, 10], [57, 4], [57, 3], [57, 6], [58, 19],
                   [59, 24], [59, 2], [59, 30], [59, 2], [60, 73], [61, 73], [62, 8], [63, 9], [63, 20], [64, 40],
                   [64, 48], [65, 6], [65, 28], [65, 57], [66, 31], [67, 12], [68, 3], [68, 6], [68, 3]]
slot_range = {"A" :[2.8, 6.9], "A2":[2.8, 8.6], "B" :[2.8, 6.9], "B2":[2.8, 8.5], "C1":[2.0, 5.0], 
              "C2":[2.0, 4.0], "D1":[2.0, 5.0], "D2":[1.7, 4.0], "E" :[1.2, 2.8], "F" :[0.8, 2.8]}
combined_slot_range = {"A":"A2", "B":"B2", "C1":"C2", "D1":"D2"}
original_stock_len = 16
machine_max_throughput = 18
wanted_spare_len = {}
wanted_spare_range = [2.0, 5.0]
slot_occupied = {"A":0, "A2":0, "B":0, "B2":0, "C1":0, "C2":0, "D1":0, "D2":0, "E":0, "F":0}
# # #  parameter sample  # # #

def main():
    ''' [[stock_num 1, length 1], [stock_num 2, length 2] ...] '''
    hss.set_required_length(required_length)

    ''' [[stock_num 1, quantity 1], [stock_num 2, quantity 2] ...] '''
    hss.set_required_number(required_number)

    ''' {"Slot name 1" : [min length, max length], "Slot name2 " : [min length, max length] ... } '''
    hss.set_slot_range(slot_range)

    ''' {"slot name 1" : "slot that combine with it", "slot name 2" : "slot that can combined with it" ...} ''' 
    hss.set_combined_slot_range(combined_slot_range)

    ''' integer length in meter '''
    hss.set_original_stock_len(original_stock_len)

    ''' integer quantity that dertermines max stock quantity throuch machine at once '''
    hss.set_machine_max_throughput(machine_max_throughput)

    ''' {-1 : "spare len 1", -2 : "spare len 2", -3: : "spare len 3", -4 : "spare len 4"} '''
    hss.set_wanted_spare_len(wanted_spare_len)

    ''' ["min length allowed as spare", "max length allowed as spare"] '''
    hss.set_wanted_spare_range(wanted_spare_range)

    ''' {"Slot 1" : 0, "Slot 2 " : 0, "Slot 3" : 0 ... } '''
    hss.init_slot_occupied(slot_occupied)

    hss.to_use_wanted_spare(True)

    hss.solve()
    hss.display_result()

if __name__ == "__main__":
    main()